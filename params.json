{
  "name": "GDB Dashboard ARM",
  "tagline": "A modular visual interface for GDB in Python",
  "body": "GDB dashboard\r\n=============\r\n\r\nModular visual interface for GDB in Python.\r\n\r\nThis comes as a standalone single-file [`.gdbinit`][raw] which, among the other\r\nthings, enables a configurable dashboard showing the most relevant information\r\nduring the program execution. Its main goal is to reduce the number of GDB\r\ncommands issued to inspect the current program status allowing the programmer to\r\nfocus on the control flow instead.\r\n\r\nInstallation\r\n------------\r\n\r\nJust place [`.gdbinit`][raw] in your home directory, for example:\r\n\r\n    wget -P ~ https://raw.githubusercontent.com/nispaur/gdb-dashboard-arm/master/.gdbinit\r\n\r\nScreenshot\r\n----------\r\n\r\n![Screenshot](http://i.imgur.com/g8I3suo.png)\r\n\r\nFeatures\r\n--------\r\n\r\n * Single GDB init file.\r\n\r\n * Write the dashboard to the main GDB console or to an external file/TTY.\r\n\r\n * Interaction with GDB using the native [Python API][api].\r\n\r\n * Several default modules are included to address the most basic\r\n   needs: source code, assembly, registers, etc.).\r\n\r\n * User-defined modules can be easily developed by extending a\r\n   [Python class](#custom-modules).\r\n\r\n * Additional configuration files (both [GDB][commands] and Python) are read\r\n   from `~/.gdbinit.d/`.\r\n\r\n * Fully styleable user interface and dynamic command prompt.\r\n\r\n * Optional syntax highlighting using the [Pygments][pygments] Python\r\n   library.\r\n\r\n * No GDB command has been redefined, instead all the\r\n   features are available as subcommands of the main `dashboard` command.\r\n\r\nMinimal requirements\r\n--------------------\r\n\r\nGDB dashboard requires at least GDB 7.7 compiled with Python 2.7 in order to\r\nwork properly.\r\n\r\nSee [#1](https://github.com/cyrus-and/gdb-dashboard/issues/1) for more\r\ndetails/workarounds.\r\n\r\nAdditional GDB front ends\r\n-------------------------\r\n\r\nGDB dashboard is not meant to work seamlessly with additional front ends, e.g.,\r\nTUI, Nemiver, etc. There are basically two options to work around this:\r\n\r\n * Prevent the front from loading the `.gdbinit` file. For example, start TUI\r\n   with `gdbtui --nx`.\r\n\r\n * Load GDB dashboard manually (only recommended if the front end is the\r\n   most used option). Install as usual, then:\r\n\r\n        mv ~/.gdbinit ~/.gdb-dashboard\r\n\r\n   Finally from the GDB shell:\r\n\r\n        source ~/.gdb-dashboard\r\n\r\nDefault modules\r\n---------------\r\n\r\nFollows the list of bundled default modules. Refer to the GDB help system for\r\nthe full syntax.\r\n\r\n * `assembly` shows the disassembled code surrounding the program counter. The\r\n   instructions constituting the current statement are marked, if available.\r\n\r\n * `history` lists the last entries of the GDB value history.\r\n\r\n * `memory` allows to inspect memory regions.\r\n\r\n * `registers` shows the CPU registers and their values.\r\n\r\n * `source` show the program source code, if available.\r\n\r\n * `stack` shows the current stack trace including the function name and the\r\n   file location, if available. Optionally list the frame arguments and locals\r\n   too.\r\n\r\n * `threads` lists the currently available threads.\r\n\r\n * `expressions` watches user expressions.\r\n\r\nCommands\r\n--------\r\n\r\nThe GDB documentation is available at `help dashboard`. Just like any GDB\r\ncommand, abbreviations are possible. Moreover, the alias `db` resolves to\r\n`dashboard`.\r\n\r\n### dashboard\r\n\r\nThis is the root command and it is used to manually redisplay the dashboard.\r\n\r\n### dashboard -output [`<file>`]\r\n\r\nBy default the dashboard is written to the GDB console but it is possible to\r\nredirect its output to a file or even to another terminal. If the target is a\r\nvalid terminal TTY then its width is used to format the dashboard, otherwise\r\nfall back to the width of the main GDB console.\r\n\r\nWithout argument reset this setting to the default.\r\n\r\n#### Display the dashboard in another terminal\r\n\r\n![Dashboard in another terminal](http://i.imgur.com/6TIKXh0.png)\r\n\r\n 1. start GDB in one terminal;\r\n\r\n 2. open another terminal (e.g. [tmux][tmux] pane) and get its TTY with the\r\n    `tty` command (e.g. `/dev/ttys001`, the name may be different for a variety\r\n    of reasons);\r\n\r\n 3. issue the command `dashboard -output /dev/ttys001` to redirect the dashboard\r\n    output to the newly created terminal;\r\n\r\n 4. debug as usual.\r\n\r\n#### Display the dashboard in a web browser\r\n\r\nPushing this even further, one could use a web browser as an auxiliary terminal\r\nusing [gotty][gotty].\r\n\r\n![Dashboard in a web browser](http://i.imgur.com/5uncF7e.png)\r\n\r\n 1. start GDB in one terminal;\r\n\r\n 2. open another terminal and execute `gotty sh -c 'tty; cat'`;\r\n\r\n 3. open a web browser, navigate to `http://localhost:8080` and note the TTY;\r\n\r\n 4. issue the command `dashboard -output /dev/ttys001` to redirect the dashboard\r\n    output to the web browser;\r\n\r\n 5. debug as usual.\r\n\r\n### dashboard -enabled [on|off]\r\n\r\nEnable or disable the automatic display of the dashboard whenever the target\r\nprogram stops. The dashboard is enabled by default and even when it is disabled,\r\nit can be manually displayed with `dashboard`.\r\n\r\nSometimes it may be convenient to redraw the dashboard even if the target\r\nprogram has not changed its execution status, for example when the programmer\r\nswitches the currently selected frame with the `up` or `down` commands. It is\r\npossible to do so by setting up some GDB hooks in the [user-defined init\r\nfile](#configuration), for example:\r\n\r\n```\r\ndefine hookpost-up\r\ndashboard\r\nend\r\n\r\ndefine hookpost-down\r\ndashboard\r\nend\r\n```\r\n\r\n### dashboard -layout [`<directive>`...]\r\n\r\nBy default, all the modules are enabled and placed within the dashboard in\r\nalphabetical order. As the number of modules grows, it is important to decide\r\nwhich modules will be part of the dashboard, and where.\r\n\r\nEach directive is in the form `[!]<module>`, when the `!` is present then the\r\ncorresponding module is disabled by default. The order of directives denotes the\r\ndisplay order within the dashboard. For example:\r\n\r\n    dashboard -layout source !assembly stack\r\n\r\nModules which do not appear in the list are disabled and placed after the last\r\nelement in alphabetical order.\r\n\r\nWhen executed without arguments, this command lists all the available modules.\r\n\r\n### dashboard -style [`<name>` [`<value>`]]\r\n\r\nAccess to the stylable attributes of the dashboard, see [Stylable\r\nattributes](#stylable-attributes). For example, to change the prompt to\r\nsomething more familiar:\r\n\r\n    dashboard -style prompt '(gdb)'\r\n\r\nThe argument is parsed as a Python literal and converted to the proper type.\r\n\r\nWhen only the name is specified this command shows the current value,\r\nwhereas without arguments prints all the attributes.\r\n\r\n### Modules subcommands\r\n\r\nEvery module adds its own subcommand `dashboard <module>` which is used to\r\ntoggle the enable flag and to redisplay the dashboard.\r\n\r\nModules may also declare additional subcommands, see `help dashboard <module>`\r\nfrom GDB.\r\n\r\nMoreover, if a module declare some stylable attributes then the command\r\n`dashboard <module> -style` will be available. Its functioning is equivalent to\r\nthe [`dashboard -style`](#dashboard--style-name-value) command but it does apply\r\nto a module.\r\n\r\nConfiguration\r\n-------------\r\n\r\nFiles in `~/.gdbinit.d/` are executed in alphabetical order, but the preference\r\nis given to Python files. If there are subdirectories, they are walked\r\nrecursively. The idea is to keep separated the custom modules definition from\r\nthe configuration itself.\r\n\r\nThe main configuration file can be placed in `~/.gdbinit.d/` (say\r\n`~/.gdbinit.d/init`) and should be used to tune the dashboard styles and modules\r\nconfiguration but also the usual GDB parameters.\r\n\r\nThe alternative is to hard code changes in the provided [`.gdbinit`][raw], to do\r\nso just add new modules and GDB settings under `# Default modules` and `# Better\r\nGDB defaults` respectively.\r\n\r\nStylable attributes\r\n-------------------\r\n\r\nThere is number of attributes that can be used to customize the aspect of the\r\ndashboard and of its modules. They are documented within the GDB help system.\r\nFor what concerns the dashboard itself it can be reached with:\r\n\r\n    help dashboard -style\r\n\r\nWhereas for modules:\r\n\r\n    help dashboard <module> -style\r\n\r\n### ANSI escape codes\r\n\r\nColors and text styles are specified using [ANSI][ansi] escape codes. For\r\nexample setting a style to `1;31` will produce `^[[1;31m`, which will result in\r\ndisplaying the text red (`31`) and bright (`1`). The ANSI output can be disabled\r\nby setting the `ansi` attribute to `False` (note that this will not affect the\r\ncommand prompt).\r\n\r\n### Syntax highlighting\r\n\r\nWhen the `ansi` attribute is set to `True` the [Pygments][pygments] Python\r\nlibrary may be used by modules to provide syntax highlighting of the source\r\ncode.\r\n\r\nThe `syntax_highlighting` stylable attribute is a string which defines the\r\nPygments [style][pygments-styles] to use.\r\n\r\nThe list of all the available styles can be obtained with (from GDB itself):\r\n\r\n    python from pygments.styles import get_all_styles as styles\r\n    python for s in styles(): print(s)\r\n\r\n### Dividers\r\n\r\nA divider is basically a terminal-wide horizontal line with an optional label.\r\nPrimary dividers are those used to separate the modules, whereas secondary\r\ndividers may be used inside modules to logically separate different sections.\r\nWhen a section or module is empty then the styles used for the divider are those\r\nwith the `off` qualifier.\r\n\r\n### Common styles\r\n\r\nThese are general purpose [ANSI][ansi] styles defined for convenience and used\r\nwithin the default modules.\r\n\r\n * `style_selected_1`\r\n * `style_selected_2`\r\n * `style_low`\r\n * `style_high`\r\n * `style_error`\r\n\r\nCustom modules\r\n--------------\r\n\r\nThe idea of custom modules is that they provide ways to access readonly\r\ninformation from the target program status; it is safe to assume that they will\r\nbe queried during the program execution only.\r\n\r\nCustom modules must inherit the `Dashboard.Module` class and define some\r\nmethods:\r\n\r\n * `label` returns the module label which will appear in the divider.\r\n\r\n * `lines` return a list of strings which will form the module content. When a\r\n    module is temporarily unable to produce its content, it should return an\r\n    empty list; its divider will then use the styles with the `off` qualifier.\r\n\r\nThe name of a module is automatically obtained by the class name.\r\n\r\nModules are instantiated once at initialization time and kept during the whole\r\nthe GDB session.\r\n\r\nOptionally, a module may include a description which will appear in the GDB help\r\nsystem by specifying a Python docstring for the class.\r\n\r\nOptionally, a module may define stylable attributes by defining the `attributes`\r\nmethod returning a dictionary in which the key is the attribute name and the\r\nvalue is another dictionary:\r\n\r\n 1. `default` is the initial value for this attribute.\r\n\r\n 2. `doc` is the documentation of this attribute which will appear in the GDB\r\n    help system. This key can be omitted.\r\n\r\n 3. `name` is the name of the attribute of the Python object, defaults to the\r\n    key value.\r\n\r\n 4. `type` is the type of this attribute, it is used to coerce the value passed\r\n    as an argument to the proper type, or raise an exception. This key defaults\r\n    to the `str` type.\r\n\r\n 5. `check` is a control callback which accept the coerced value and returns\r\n    `True` if the value satisfies the constraint and `False` otherwise. This key\r\n    is optional, when omitted no check is performed.\r\n\r\nOptionally, a module may declare subcommands by defining the `commands` method\r\nreturning a dictionary in which the key is the command name and the value is\r\nanother dictionary:\r\n\r\n 1. `action` is the callback to be executed which accepts the raw input string\r\n    from the GDB prompt. Callbacks may raise exceptions to notify erroneous\r\n    situations which message will be shown automatically to the user.\r\n\r\n 2. `doc` is the command documentation.\r\n\r\n 3. `completion` is the completion policy, one of the `gdb.COMPLETE_*` constants\r\n    defined in the [reference manual][completion]. This key is optional and\r\n    defaults to `None` which is equivalent to `gdb.COMPLETE_NONE`.\r\n\r\n### Common functions\r\n\r\nA number of auxiliary common functions are defined in the global scope, they can\r\nbe found in the provided [`.gdbinit`][raw] and concern topics like [ANSI][ansi]\r\noutput, divider formatting, conversion callbacks, etc. They should be more or\r\nless self-documented, some usage examples can be found within the bundled\r\ndefault modules.\r\n\r\n### Example\r\n\r\nDefault modules already provide a good example, but here is a simple module\r\nwhich may be used as a template for new custom modules, it allows the programmer\r\nto note down some snippets of text during the debugging session.\r\n\r\n\r\n```python\r\nclass Notes(Dashboard.Module):\r\n    \"\"\"Simple user-defined notes.\"\"\"\r\n\r\n    def __init__(self):\r\n        self.notes = []\r\n\r\n    def label(self):\r\n        return 'Notes'\r\n\r\n    def lines(self, style_changed):\r\n        out = []\r\n        for note in self.notes:\r\n            out.append(note)\r\n            if self.divider:\r\n                out.append(divider())\r\n        return out[:-1] if self.divider else out\r\n\r\n    def add(self, arg):\r\n        if arg:\r\n            self.notes.append(arg)\r\n        else:\r\n            raise Exception('Cannot add an empty note')\r\n\r\n    def clear(self, arg):\r\n        self.notes = []\r\n\r\n    def commands(self):\r\n        return {\r\n            'add': {\r\n                'action': self.add,\r\n                'doc': 'Add a note.'\r\n            },\r\n            'clear': {\r\n                'action': self.clear,\r\n                'doc': 'Remove all the notes.'\r\n            }\r\n        }\r\n\r\n    def attributes(self):\r\n        return {\r\n            'divider': {\r\n                'doc': 'Divider visibility flag.',\r\n                'default': True,\r\n                'type': bool\r\n            }\r\n        }\r\n```\r\n\r\nTo use the above just save it in a Python file, say `notes.py`, inside\r\n`~/.gdbinit.d/`, the following commands (together with the help) will be\r\navailable:\r\n\r\n    dashboard notes\r\n    dashboard notes add\r\n    dashboard notes clear\r\n    dashboard notes -style\r\n\r\nResources\r\n---------\r\n\r\n* [GDB Python API][api]\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2015-2016 Andrea Cardaci <cyrus.and@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[raw]: https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit\r\n[api]: https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html\r\n[commands]: https://sourceware.org/gdb/onlinedocs/gdb/Command-Files.html\r\n[pygments]: http://pygments.org/\r\n[pygments-styles]: http://pygments.org/docs/styles\r\n[ansi]: https://en.wikipedia.org/wiki/ANSI_escape_code\r\n[format]: https://docs.python.org/2/library/string.html#format-string-syntax\r\n[prompt]: https://sourceware.org/gdb/onlinedocs/gdb/gdb_002eprompt.html\r\n[completion]: https://sourceware.org/gdb/onlinedocs/gdb/Commands-In-Python.html\r\n[tmux]: https://github.com/tmux/tmux\r\n[gotty]: https://github.com/yudai/gotty\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}